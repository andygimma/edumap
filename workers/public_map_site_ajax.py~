# System libraries.
import datetime
import jinja2
import json
import logging
import os
from google.appengine.ext.db import to_dict
from google.appengine.ext import db
from google.appengine.api import memcache
from google.appengine.ext.db import Query
from collections import OrderedDict
# Local libraries.
import base
import key
import site_db
import event_db

PAGE_OFFSET = 100

dthandler = lambda obj: obj.isoformat() if isinstance(obj, datetime.datetime) else None

open_statuses = [s for s in site_db.Site.status.choices if 'Open' in s]
closed_statuses = [s for s in site_db.Site.status.choices if not s in open_statuses]

class PublicMapAjaxHandler(base.RequestHandler):      
  def get(self):
    logging.debug("PublicMapAjaxHandler")
    where_string = "Open"
    gql_string = 'SELECT latitude, longitude, claimed_by, work_type, case_number, floors_affected FROM Site WHERE status >= :1 and event = :2'# WHERE status >= %s", where_string
    q = db.GqlQuery(gql_string, where_string, event.key())


    this_offset = page_int * PAGE_OFFSET
    logging.debug("this_offset = " + str(this_offset))
	
    ids = [key.key().id() for key in q.fetch(PAGE_OFFSET, offset = this_offset)]
    logging.debug("ids len = " + str(len(ids)))
	
    output = json.dumps(
	[s[1] for s in site_db.GetAllCached(event, ids)],
	default=dthandler)
    self.response.out.write(output)
    return
        

    
